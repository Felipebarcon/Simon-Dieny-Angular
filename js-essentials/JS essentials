//*************************************
//*************************************
// PRIMITIVES

3
3.14

'Hello, JavaScript 👋'

true
false

null
undefined

//*************************************
//*************************************
// NON PRIMITIVES

const arr = [1, 2, 3];
arr

const user = { firstName: 'John', lastName: 'Doe'};
user

//*************************************
//*************************************
// OPERATORS

// + est un opérateur binaire : addition

3 + 3.14;

// + est un opérateur binaire : concaténation

'Hello, ' + 'World';

3 + '000';

// + est un opérateur unaire : évaluer une valeur en tant que nombre

+'300';

!true;
!false;

//*************************************
//*************************************
// TYPE

typeof(3);
typeof(3.14);

typeof 'Hello';

typeof(true);

typeof(undefined);
typeof(null);

typeof([1, 2, 3]);
typeof({name: 'John'});


typeof function() {};


//*************************************
//*************************************
// Exercices

const a = 1;
const b = '1';

console.log(a + b);
console.log(a + a);
console.log(b + b);


console.log(!a);
console.log(!b);
console.log(+a);
console.log(+b);

console.log(typeof(a + b));
console.log(typeof(a + a));
console.log(typeof(b + b));

console.log(typeof(!a));
console.log(typeof(!b));
console.log(typeof(+a));
console.log(typeof(+b));

//*************************************
//*************************************
// NaN ==> Not a valid Numerical operation

const greeting = 'Hello World';

const nan = greeting / 2;

nan;

typeof nan

nan == nan;
nan === nan;

// tester si une valeur est égale à NaN
Number.isNaN(greeting);
Number.isNaN(nan);

//*************************************
//*************************************
// BOOLEAN FALSY VALUES

// Toutes les valeurs sont évaluées à Truthy sauf celles appartenant à la liste Falsy: ⤵️

"";
0;
-0;
null;
false;
undefined;
NaN;

!""; // '' => !'' => !false => true

// savoir si une valeur est fausse
!!''; // <=> Bolean('') => false

!!0;
!!-0;
!!null;
!!false;
!!undefined;
!!NaN;

//*************************************
//*************************************
// CONDITIONS

const input = { value: 'test'}

if(!!input.value) {
  console.log(input.value)
}

const customers = ['John', 'Jack', 'Davis'];

while(customers.length > 0) { // number => boolean
  let customer = customers.shift()
  console.log(customer)
}


//*************************************
//*************************************
// QUAND UTILISER LA CONVERSION IMPLICITE

const ageMajorityFr = 18;
const ageMajorityUs = '21'

if(Number(ageMajorityFr) < Number(ageMajorityUs)) {
  console.log('Ok')
}

if(+ageMajorityFr < +ageMajorityUs) {
  console.log('Ok')
}

if(ageMajorityFr < ageMajorityUs) {
  console.log('Ok')
}

18 < '21'

//*************************************
//*************************************
// LES OPERATEURS DE COMPARAISON

const age = 18;
const age2 = age + 0;
const ageStr = '18';

age == age2;
age === age2;

age == ageStr;
age === ageStr;

age == +ageStr;
age === +ageStr;

//*************************************
//*************************************
// UTILISER == CORRECTEMENT

const john = { skill: null };
const jack = {};

if((john.skill === null || jack.skill === null) && 
   (john.skill === undefined || jack.skill === undefined)) {
  console.log('No skills in the team')
}

if(john.skill == null && jack.skill == null) {
  console.log('No skills in the team')
}


//*************************************
//*************************************
// LES FONCTIONS

const sum = function (a, b) {
  return a + b
};

function substract(a, b) {
  return a -b
};

sum(1,2);

substract(2, 1);

if(true) { // Scope local => fonction sum n'est pas disponible
  sum(1, 2)
  substract(2, 1)
}

//*************************************
//*************************************
// EXERCICES

const users = [
  { name: 'Joe', skills: ['web dev', 'mobile dev'] },
  { name: 'John', skills: null }
];

function usersWithSkill(users, skill) {
  return users.filter(function(user) {
    return !!user.skills && user.skills.includes(skill)
  })
}

usersWithSkill(users, 'web dev');



//*************************************
//*************************************
// PARCOURIR UN TABLEAU

const numbers = [1, 2, 3, 4, 5];
let numbersX2 = [];
let numbersStr = [];


// 🚫 utilise une variable intermédiaire
// 🚫 effet de bord avec l'extérieur
// 🚫 traitement global supérieur à 1 ligne
// 🚫 pas de valeur de retour

// for(let i = 0; i < numbers.length; i++) {
//   numbersX2.push(numbers[i] * 2)
// }

// ✅ utilise une variable intermédiaire
// 🚫 effet de bord avec l'extérieur
// 🚫 traitement global supérieur à 1 ligne
// 🚫 pas de valeur de retour

// for(const number of numbers) {
//   numbersX2.push(number * 2 )
// }

// ✅ utilise une variable intermédiaire
// ✅ effet de bord avec l'extérieur
// ✅ traitement global supérieur à 1 ligne
// 🚫 pas de valeur de retour

// numbers.forEach(function(number) {
//   numbersX2.push(number * 2)
// })

// ✅ utilise une variable intermédiaire
// ✅ effet de bord avec l'extérieur
// ✅ traitement global supérieur à 1 ligne
// ✅ pas de valeur de retour

numbersX2 = numbers.map(n => n * 2)
numbersStr = numbers.map(n => n.toString())

//*************************************
//*************************************
// ASYNCHRONE

const getUserData = new Promise(function(resolve, reject) {
  setTimeout(function() {
    resolve({ name: 'Joe'})
  }, 100)
})

getUserData.then(function(user) {
  console.log(user)
})


